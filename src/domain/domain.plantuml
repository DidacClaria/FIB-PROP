@startuml

title __DOMAIN's Class Diagram__\n

  namespace domain {
    class domain.BlackCell {
        - columnValue : int
        - rowValue : int
        + BlackCell()
        + getColumnValue()
        + getRowValue()
        + getValue()
        + setColumnValue()
        + setRowValue()
        + setValue()
    }
  }
  

  namespace domain {
    abstract class domain.Cell {
        {abstract} + getColumnValue()
        {abstract} + getRowValue()
        {abstract} + getValue()
        {abstract} + setColumnValue()
        {abstract} + setRowValue()
        {abstract} + setValue()
    }
  }
  

  namespace domain {
    class domain.CtrlDomain {
        + CtrlDomain()
        + generateKakuro()
        + getActiveUser()
        + listKakuro()
        + listPersonalStats()
        + listRanking()
        + logInUser()
        + playKakuro()
        + proposeKakuro()
        + remove_kakuros()
        + remove_user()
        + saveGame()
        + validate_game()
        - cont_execution()
        - create_kakuro()
        - game_execution()
        - global_ranking()
        - ini_execution()
        - personal_stats()
        - play_games()
    }
  }
  

  namespace domain {
    class domain.CtrlGame {
        - games : ArrayList<Game>
        - numGames : int
        + CtrlGame()
        + saveGame()
        + startKakuro()
    }
  }
  

  namespace domain {
    class domain.CtrlKakuro {
        - kakuros : ArrayList<Kakuro>
        - numKakuros : int
        + CtrlKakuro()
        + generateKakuro()
        + listKakuro()
        + list_id_kakuro()
        + proposeKakuro()
    }
  }
  

  namespace domain {
    class domain.CtrlUser {
        - users : ArrayList<User>
        + CtrlUser()
        + createUser()
        + getActiveUser()
        + setActiveUser()
    }
  }
  

  namespace domain {
    class domain.Game {
        - idGame : int
        + Game()
        + Game()
    }
  }
  

  namespace domain {
    class domain.Kakuro {
        {static} ~ comb : HashMap<Integer, Integer>
        ~ notes : HashMap<Integer, Integer>
        - cells : Cell[][]
        - difficulty : int
        - idKakuro : int
        - numColumns : int
        - numRows : int
        - solutions : int
        + Kakuro()
        + Kakuro()
        + getIdKakuro()
        + listKakuro()
        + proposeKakuro()
        + setIdKakuro()
        - calculateSumC()
        - calculateSumF()
        - checkH()
        - checkV()
        - clearWhiteCells()
        - correctCellH()
        - correctCellV()
        - correctFormat()
        - dfsSym()
        - generateBlackNumbers()
        - generateRandomBlack()
        - generateWhiteNumbers()
        - listRCNumbers()
        - noAlone()
        - noAloneSym()
        - restart()
        - searchDFS()
        - searchIntersections()
        - searchWhites()
        - search_SN_blackLEFT()
        - search_SN_blackTOP()
        - solve()
        - solveKakuro()
        - solveKakuroMultiple()
        - solveMultiple()
        - wrongCellH()
        - wrongCellV()
    }
  }
  

  namespace domain {
    class domain.Main {
        {static} - a : CtrlDomain
        {static} - c : int
        {static} - f : int
        {static} - kakuro : String[][]
        {static} + main()
        {static} + printKakuro()
        {static} + readKakuro()
    }
  }
  

  namespace domain {
    class domain.Pair {
        + p1 : int
        + p2 : int
        + Pair()
        + first()
        + second()
    }
  }
  

  namespace domain {
    class domain.Stat {
        - completed : boolean
        - numHints : int
        - score : int
        - time : int
        + Stat()
    }
  }
  

  namespace domain {
    class domain.User {
        - gamesPlayed : ArrayList<Game>
        - name : String
        + User()
        + User()
        + get_Nom()
    }
  }
  

  namespace domain {
    class domain.WhiteCell {
        - value : int
        + WhiteCell()
        + getColumnValue()
        + getRowValue()
        + getValue()
        + setColumnValue()
        + setRowValue()
        + setValue()
    }
  }
  

  domain.BlackCell -up-|> domain.Cell
  domain.CtrlDomain o-- domain.CtrlGame : ctrlGame
  domain.CtrlDomain o-- domain.CtrlKakuro : ctrlKakuro
  domain.CtrlDomain o-- persistence.CtrlPersistence : ctrlPersistence
  domain.CtrlDomain o-- presentation.CtrlPresentation : ctrlPresentation
  domain.CtrlDomain o-- domain.CtrlUser : ctrlUser
  domain.CtrlGame o-- domain.Game : activeGame
  domain.CtrlGame o-- domain.CtrlDomain : ctrlDomain
  domain.CtrlKakuro o-- domain.CtrlDomain : ctrlDomain
  domain.CtrlKakuro o-- domain.Kakuro : kakuroCreated
  domain.CtrlUser o-- domain.User : activeUser
  domain.CtrlUser o-- domain.CtrlDomain : ctrlDomain
  domain.Game o-- domain.Kakuro : gameScenario
  domain.Game o-- domain.User : player
  domain.Game o-- domain.Stat : stat
  domain.WhiteCell -up-|> domain.Cell


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
